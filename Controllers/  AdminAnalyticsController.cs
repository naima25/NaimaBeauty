using Microsoft.AspNetCore.Mvc;
using NaimaBeauty.Dtos;
using NaimaBeauty.Data; // your DbContext namespace
using System.Threading.Tasks;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;

namespace NaimaBeauty.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AdminAnalyticsController : ControllerBase
    {
        private readonly AppDbContext _context;

        public AdminAnalyticsController(AppDbContext context)
        {
            _context = context;
        }


        // GET: api/AdminAnalytics/orders-overtime
        [HttpGet("orders-overtime")]
        public async Task<ActionResult<List<OrdersOverTimeDto>>> GetOrdersOverTime()
        {
            // Retrieve all orders from the database asynchronously
            var orders = await _context.Orders.ToListAsync();

            // Group orders by the date portion of the OrderDate (ignoring time)
            var ordersByDate = orders
                .GroupBy(order => order.OrderDate.Date)  // Group by date only
                .Select(group => new OrdersOverTimeDto
                {
                    Date = group.Key,                     // The date of the group
                    TotalOrders = group.Count(),          // Number of orders on that date
                })
                .OrderBy(dto => dto.Date)                 // Sort by date ascending
                .ToList();

            // Return the result as an HTTP 200 OK response with the list of DTOs
            return Ok(ordersByDate);
        }

        // GET: api/AdminAnalytics/revenue-overtime
        [HttpGet("revenue-overtime")]
        public async Task<ActionResult<List<RevenueOverTimeDto>>> GetRevenueOverTime()
        {
            // Retrieve all orders asynchronously
            var orders = await _context.Orders.ToListAsync();

            // Group orders by the date portion of OrderDate and sum their prices
            var revenueByDate = orders
                .GroupBy(order => order.OrderDate.Date)
                .Select(group => new RevenueOverTimeDto
                {
                    Date = group.Key,
                    TotalRevenue = group.Sum(order => order.Price)
                })
                .OrderBy(dto => dto.Date)
                .ToList();

            return Ok(revenueByDate);
        }

        // GET: api/AdminAnalytics/top-products
        [HttpGet("top-products")]
        public async Task<ActionResult<List<TopSellingProductDto>>> GetTopSellingProducts()
        {
            // Query OrderItems, including the related Product to access product details
            var topProducts = await _context.OrderItems
                .Include(oi => oi.Product)
                // Group order items by ProductId and Product Name
                .GroupBy(oi => new { oi.ProductId, oi.Product.Name })
                // Project each group into the TopSellingProductDto
                .Select(g => new TopSellingProductDto
                {
                    ProductId = g.Key.ProductId,
                    ProductName = g.Key.Name,
                    TotalQuantitySold = g.Sum(oi => oi.Quantity),          // Sum total quantity sold across all order items for this product
                    TotalRevenue = g.Sum(oi => oi.Quantity * oi.Product.Price)   // Sum total revenue generated by this product

                })

                .OrderByDescending(dto => dto.TotalQuantitySold)

                .Take(10)

                .ToListAsync();

            // Return the list of top selling products as HTTP 200 OK response
            return Ok(topProducts);
        }

        [HttpGet("orders-by-category")]
        public async Task<ActionResult<IEnumerable<OrdersByCategoryDto>>> GetOrdersByCategory()
        {
            var ordersByCategory = await _context.OrderItems
                .Include(oi => oi.Product)
                    .ThenInclude(p => p.ProductCategories)
                        .ThenInclude(pc => pc.Category)
                .SelectMany(oi => oi.Product.ProductCategories.Select(pc => new
                {
                    pc.CategoryId,
                    CategoryName = pc.Category.Name,
                    Quantity = oi.Quantity,
                    Revenue = oi.Quantity * oi.Product.Price
                }))
                .GroupBy(x => new { x.CategoryId, x.CategoryName })
                .Select(g => new OrdersByCategoryDto
                {
                    CategoryId = g.Key.CategoryId,
                    CategoryName = g.Key.CategoryName,
                    TotalQuantitySold = g.Sum(x => x.Quantity),
                    TotalRevenue = g.Sum(x => x.Revenue)
                })
                .ToListAsync();

            return Ok(ordersByCategory);
        }
      
    }

    
}

